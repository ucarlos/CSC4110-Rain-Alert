#+TITLE: CSC 4110 Project README
#+AUTHOR: Ulysses Carlos, Jared Goldman
#+DATE: April 28, 2020
#+OPTIONS: toc:nil

#+LaTeX_HEADER: \usepackage[T1]{fontenc}
#+LaTeX_HEADER: \usepackage{mathpazo}
#+LaTeX_HEADER: \linespread{1.05}
#+LaTeX_HEADER: \usepackage[scaled]{helvet}
#+LaTeX_HEADER: \usepackage{courier}
* CSC 4110 Project -- Rain Detector using a Raspberry Pi -- Post Project Branch
This is the Post Project Branch of the Rain Alert Application.
This repository contains all the files needed to use a Raspberry Pi as a Rain Detector, which reports changes in local rain levels to a email server, as well as other options.
Ulysses Carlos is the main contributor and will add some of the application functions that could not be added in time.
** Future Additions
- Functional Text-based UI
- Make Sensor tracking work in the background to enable other components of the application to be used.
- Improved Function Options
- Debug Mode

** Project Timeline

** Necessary Hardware
This project required the following hardware in order to work:
- Rain Sensor
- Float Sensor
- Rain Gauge (You can use a Graduated Cylinder in lieu of one)
- Raspberry Pi Zero W
** Necessary Software
*** TLDR;
If on Debian/Ubuntu/Raspbian, execute this command:
#+BEGIN_SRC bash
sudo apt-get install git postgresql libpq-dev libpqxx-dev cmake 
sudo apt-get install libcurl4-openssl-dev ncurses dialog 
sudo apt-get install libssl-dev libboost-dev
#+END_SRC
*** Long Explanation
Since this is a CLion Project, you can try installing it on your system and opening it, making sure to have the following components installed on your system. CLion comes with a version of CMake, but you need to install the following regardless:
**** Git
**** PostgreSQL with libpq and libpqxx >= 6
You can install all three on an Debian/Ubuntu/Raspbian using the following command:
#+BEGIN_SRC bash
sudo apt-get install postgresql libpq-dev libpqxx-dev
#+END_SRC
Please be aware that libpqxx-dev included with your package manager may be an older version, so you may have to [[https://github.com/jtv/libpqxx][compile from source]] to get the latest version.
# If on macOS, you can install the packages using homebrew:
# #+BEGIN_SRC bash
# brew install postgresql
# brew install libpq
# brew install libpqxx
# #+END_SRC
**** CMake >= 3.15 (If CLion cannot be installed on your system)
If on Debian/Ubuntu/Raspbian, use the following command:
#+BEGIN_SRC bash
sudo apt-get install cmake
#+END_SRC
On other Linux or UNIX Systems, you may need to use your package manager or [[https://cmake.org/download/][compile from source.]] You may also have to compile from source if your CMake version is less than 3.15.

**** libcurl-dev >= 7.50.0 with SSL.
To install libcurl-dev on Debian/Ubuntu/Raspbian, do
#+BEGIN_SRC bash
sudo apt-get install libcurl4-openssl-dev libssl-dev
#+END_SRC
Or use whatever package manager you have to install it.

In order to know if SSL is enabled within curl, do the following command:
#+BEGIN_SRC bash
curl-config --feature
#+END_SRC

You should see a list that should contain "SSL". If not, install a more recent version of libcurl through your package manager or [[https://curl.haxx.se/download.html][compile from source.]]
**** NCurses and Dialog Libraries
In order to display the text-based UI, NCurses and dialog must be installed on your system.
To do so, do
#+BEGIN_SRC bash
sudo apt-get install ncurses dialog
#+END_SRC
**** Boost Library
XML Configuration uses XML parsing and property tree libraries from Boost. You can install boost by doing
#+BEGIN_SRC bash
sudo apt-get install libboost-dev
#+END_SRC
** Explanation 
A Video explaining the project can be found [[https://youtu.be/HR-591p1Yrk][here.]]
** How to compile
First, clone the repository.
#+BEGIN_SRC bash
git clone https://github.com/ucarlos/CSC4110_Project.git
#+END_SRC 

If you can get CLion running on your machine, simply execute the program by pressing the run button on the top right (SHIFT-F10). If you can't get CLion (Or decide not to), run the following command in the project directory:

#+BEGIN_SRC bash
cmake -DCMAKE_BUILD_TYPE=Debug -G "CodeBlocks - Unix Makefiles" .
make
#+END_SRC

** Example Usage
To run the program, do
#+BEGIN_SRC sh
./CSC4110_Project
#+END_SRC
This executable may be found in the project directory, or in one of the cmake builds.
** References used for the project
- [[https://computing.llnl.gov/tutorials/pthreads/][Pthread Tutorial]]
- [[https://en.cppreference.com][C++ Reference]]
- [[https://computing.llnl.gov/tutorials/pthreads/][POSIX Thread Introduction]]
- [[https://www.cs.cmu.edu/afs/cs/academic/class/15492-f07/www/pthreads.html][POSIX Thread on C++]]
- [[https://curl.haxx.se/libcurl/c/][libcurl Documentation]]
- [[https://libpqxx.readthedocs.io/en/latest/][libpqxx Documentation]]
- [[https://www.boost.org/doc/libs/1_44_0/doc/html/boost_propertytree/parsers.html][Boost XML Parser and Property Trees]]
- https://github.com/leemunroe/responsive-html-email-template


